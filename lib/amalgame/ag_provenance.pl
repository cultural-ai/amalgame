:- module(ag_provenance,
	[
	 provenance_graph/2,
	 add_amalgame_prov/3,
	 update_amalgame_prov/2,                      % -Strategy, +Mapping
	 flush_prov_cache/0,
	 remove_old_prov/2,                           % +Process, +ProvGraph

	 prov_was_generated_by/4,   % +Activity, +Entities, +Graph, +Options
	 prov_clear_activity/1,	    % +Process (bnode)
	 prov_assert_entity_version/3,
	 current_program_uri/2

	]).

:- use_module(library(http/http_host)).
:- use_module(library(http/http_session)).
:- use_module(library(semweb/rdf_db)).
:- use_module(library(semweb/rdfs)).

:- use_module(library(version)).
:- use_module(library(prov_schema)).
:- use_module(library(amalgame/map)).
:- use_module(user(user_db)).

:- dynamic
	current_program_uri/2.

flush_prov_cache :-
	retractall(current_program_uri(_,_)).


%%	provenance_graph(+Strategy, ?Graph) is det.
%
%	True if Graph is the provenance graph associated with strategy.

provenance_graph(Strategy, Graph) :-
	rdf(Graph, amalgame:hasPlan, Strategy, Graph),
	!.

provenance_graph(Strategy, Graph) :-
	ground(Strategy),
	rdf(Strategy, amalgame:publish_ns, NS),
	(   atomic_list_concat([NS, prov],  Graph), \+ rdf_graph(Graph)
	->  true
	;   repeat, gensym('provgraph', Local),
	    atomic_list_concat([NS, Local], Graph),
	    \+ rdf_graph(Graph)
	),
	create_prov_graph(Strategy, Graph).

create_prov_graph(Strategy, Graph) :-
	format(atom(Label), 'Provenance graph for strategy ~p', [Strategy]),
	rdf_assert(Graph, rdf:type, prov:'Bundle', Graph),
	rdf_assert(Graph, amalgame:hasPlan, Strategy, Graph),
	rdf_assert(Graph, rdfs:label, literal(lang(en,Label)), Graph),
	% Copy Strategy triples to empty prov graph:
	findall(rdf(Strategy,P,O), rdf(Strategy,P,O,Strategy), STriples),
	forall(member(rdf(S,P,O), STriples), rdf_assert(S,P,O,Graph)).

update_amalgame_prov(Strategy, Mapping) :-
	provenance_graph(Strategy, ProvGraph),
	rdf_retractall(Mapping, _, _, ProvGraph),
	findall(rdf(Mapping,P,O),
		rdf(Mapping,P,O,Strategy),
		Triples),
	forall(member(rdf(S,P,O), Triples),
	       rdf_assert(S,P,O,ProvGraph)
	      ).

add_amalgame_prov(Strategy, Process, Results) :-
	rdf_equal(prov:used, ProvUsed),
	rdf_equal(prov:wasDerivedFrom, ProvWDF),

	provenance_graph(Strategy, ProvGraph),

	% Remove old info about Process from ProvGraph
	remove_old_prov(Process, ProvGraph),

	% Copy all triples about Process from Strategy to ProvGraph
	findall(rdf(Process, P, O), rdf(Process,P,O,Strategy), ProcessTriples),

	% Translate subProperties of ompv:used to prov:used
	findall(rdf(Process, ProvUsed, S),
		(   rdf_has(Process, ProvUsed, S, RealProp),
		    rdf(Process, RealProp, S, Strategy)
		),
		InputTriples),

	(   Results = scheme(Vocab)
	->  Artifacts = [Vocab]
	;   assert_counts(Results, ProvGraph),
	    pairs_keys(Results, Artifacts)
	),

	prov_was_generated_by(Process, Artifacts, ProvGraph, []),

	% Generate prov:wasDerivedFrom triples between Mappings
	findall(rdf(Target, ProvWDF, Source),
		(   member(Target, Artifacts),
		    rdf_has(Process, prov:used, Source, RealProp),
		    rdf(Process, RealProp, S, Strategy)
		),
		DerivedTriples),

	% Copy all triples about the Mapping from Strategy to ProvGraph
	findall(rdf(S,P,O),
		(   member(S, Artifacts),
		    rdf(S,P,O,Strategy)
		), ArtifactTriples),

	append([ProcessTriples,
		ArtifactTriples,
		InputTriples,
		DerivedTriples], AllTriples),
	forall(member(rdf(S,P,O), AllTriples), rdf_assert(S,P,O,ProvGraph)).


%%	remove_old_prov(+Process, +Graph) is det.
%
%	Remove all provenance triples related to Process from Graph.
%

remove_old_prov(Process, ProvGraph) :-
	findall(Bnode,
		(   rdf(Process, _, Bnode, ProvGraph),
		    rdf_is_bnode(Bnode),
		    \+ (rdf(OtherProcess, _, Bnode, ProvGraph),
			OtherProcess \= Process),
		    \+ rdfs_individual_of(Bnode, prov:'SoftwareAgent')
		),
		Bnodes),
	forall(member(B,Bnodes), remove_old_prov(B,ProvGraph)),
	rdf_retractall(Process, _, _, ProvGraph),
	rdf_retractall(_, _ ,Process, ProvGraph).


%%     prov_was_generated_by(+Activity, +Entities, +Graph, +Options) is
%%     det.
%
%	Assert provenance information about Entities generated by
%	Activity into named Graph (all three are URLs).
%	Options is a list of options, currently implemented options
%	include:
%
%	* was_derived_from([Sources]) to indicate the entities were
%	derived from the given list of source entities
%	* request(Request) to record information about the request URI
%	used in the web service to create Entities.

prov_was_generated_by(_, [], _, _) :- !.
prov_was_generated_by(Process, Artifacts, Graph, Options) :-
	is_list(Artifacts),!,
	rdf_assert(Process, rdf:type, prov:'Activity',	Graph),
	forall(member(Artifact, Artifacts),
	       (   rdf_assert(Artifact, rdf:type, prov:'Entity',    Graph),
		   rdf_assert(Artifact, prov:wasGeneratedBy, Process, Graph)
	       )
	      ),
	prov_program(Graph, Program),
	prov_agent(Graph, Agent),
	get_time(Now),
	get_xml_dateTime(Now, NowXML),
	rdf_assert(Process, prov:endedAtTime,   literal(type(xsd:dateTime, NowXML)) , Graph),
	rdf_assert(Process, prov:wasAssociatedWith, Program, Graph),
	rdf_assert(Process, prov:wasAssociatedWith, Agent,   Graph),

	(   memberchk(was_derived_from(Sources), Options)
	->  forall(member(Source, Sources),
		   (   forall(member(Artifact, Artifacts),
			     rdf_assert(Artifact, prov:wasDerivedFrom,  Source,  Graph)
			     ),
		       rdf_assert(Process, prov:used, Source, Graph),
		       (   \+ rdfs_individual_of(Source, prov:'Entity')
		       ->  rdf_assert(Source, rdf:type,	prov:'Entity', Graph)
		       ;   true
		       )
		   )
		  )
	;   true
	),
	(   memberchk(request(Request), Options)
	->  http_current_host(Request, Hostname, Port, [global(true)]),
	    memberchk(request_uri(ReqURI), Request),
	    memberchk(protocol(Protocol), Request),
	    format(atom(ReqUsed), '~w://~w:~w~w', [Protocol,Hostname,Port,ReqURI]),
	    rdf_assert(Process, amalgame:request, ReqUsed, Graph)
	;   true
	),
	true.

prov_was_generated_by(Process, Artifact, Graph, Options) :-
	atom(Artifact),!,
	prov_was_generated_by(Process, [Artifact], Graph, Options).

prov_clear_activity(Activity) :-
	rdf_retractall(Activity, _, _, _),
	rdf_retractall(_, _, Activity, _).

prov_program(Graph, Program) :-
	current_program_uri(Graph, Program),!.

prov_program(Graph, Program)  :-
	(   current_prolog_flag(version_git, PL_version)
	->  true
	;   current_prolog_flag(version, PL_version)
	),
	findall(M-U-V,
		(   git_module_property(M, home_url(U)),
		    git_module_property(M, version(V))
		),
		MUVs
	       ),
	Prolog = 'swi-prolog'-'http://www.swi-prolog.org'-PL_version,
	All = [Prolog|MUVs],
	variant_sha1(All, Hash),
	atomic_list_concat(['http://localhost/ns/amalgame/version/x', Hash], Program),
	assert(current_program_uri(Graph, Program)),
	rdf_assert(Program, rdfs:label, literal('Amalgame alignment platform'), Graph),
	rdf_assert(Program, rdf:type,   prov:'SoftwareAgent', Graph),

	forall(member(M-U-V, All),
	       (   rdf_bnode(B),
	           rdf_assert(Program, amalgame:component, B, Graph),
		   rdf_assert(B, 'http://usefulinc.com/ns/doap#revision',
			      literal(V), Graph),
		   rdf_assert(B, 'http://usefulinc.com/ns/doap#name',
			      literal(M), Graph),
		   rdf_assert(B, rdfs:seeAlso,
			      literal(U), Graph)
	       )
	      ),
	!.

prov_agent(Graph, Agent) :-
	(
	http_in_session(_)
	->
	   logged_on(User, anonymous),
	   user_property(User, url(Agent)),
	   (   user_property(User, realname(UserName))
	   ->  true
	   ;   user_property(User, openid(UserName))
	   ->  true
	   ;   UserName = Agent
	   )
	;
	 rdf_bnode(Agent),
	 UserName = 'anonymous user (not logged in)'
	),

	rdf_assert(Agent, rdfs:label, literal(UserName),  Graph),
	rdf_assert(Agent, rdf:type,   prov:'Agent',	  Graph).

get_xml_dateTime(T, TimeStamp) :-
	format_time(atom(TimeStamp), '%Y-%m-%dT%H-%M-%S%Oz', T).

%%	prov_assert_entity_version(+Entity,+SourceGraph,+TargetGraph)
%	is semidet.
%
%	Assert (git) version information about Entity into the named
%	graph TargetGraph. SourceGraph is the main named graph in which
%	Entity is defined.

prov_assert_entity_version(Entity, SourceGraph, TargetGraph) :-
	rdf_graph_property(SourceGraph, source(SourceFileURL)),
	uri_file_name(SourceFileURL, Filename),
	file_directory_name(Filename, Dirname),
	register_git_module(Entity, [directory(Dirname), home_url(Entity)]),
	(   git_module_property(Entity, version(Version))
	->  format(atom(VersionS),  'GIT version: ~w', [Version]),
	    rdf_assert(Entity, owl:versionInfo, literal(VersionS), TargetGraph)
	;   (rdf_graph_property(SourceGraph, hash(Hash)),
	     rdf_graph_property(SourceGraph, source_last_modified(LastModified)),
	     format_time(atom(Mod), 'Last-Modified: %Y-%m-%dT%H-%M-%S%Oz', LastModified),
	     rdf_assert(Entity, owl:versionInfo, literal(Mod), TargetGraph),
	     rdf_assert(Entity, owl:versionInfo, literal(Hash), TargetGraph)
	    )
	).

assert_counts([],_).
assert_counts([A-M|Tail], ProvGraph) :-
	assert_count(A, M, ProvGraph),
	assert_counts(Tail, ProvGraph).

assert_count(MapUri, MapList, ProvGraph) :-
	maplist(correspondence_source, MapList, Ss0),
	maplist(correspondence_target, MapList, Ts0),
	sort(Ss0, Ss),
	sort(Ts0, Ts),
	length(Ss, SN),
	length(Ts, TN),
	length(MapList, Count),
	rdf_assert(MapUri, amalgame:count,
		   literal(type('http://www.w3.org/2001/XMLSchema#int', Count)), ProvGraph),
	rdf_assert(MapUri, amalgame:mappedSourceConcepts,
		   literal(type('http://www.w3.org/2001/XMLSchema#int', SN)), ProvGraph),
	rdf_assert(MapUri, amalgame:mappedTargetConcepts,
		   literal(type('http://www.w3.org/2001/XMLSchema#int', TN)), ProvGraph).
